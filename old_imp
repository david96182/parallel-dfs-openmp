//
//        g++ -o dfs -fopenmp DFS.cpp
// 			./dfs 4 from to
//

/*void s_dfs(int v, int dest, bool found)
{
	visited[v] = true;
	output.push_back(v);
	if(v != dest && found == false) {
	for (int i = 0; i < graph[v].size(); ++i)
	{
		if (!visited[graph[v][i]])
		{
			s_dfs(graph[v][i],dest,found);
		}
	}
	}
	else {
		found = true;
		return;
	}
}*/
/*
bool s_dfs(int v, int dest)
{
	visited[v] = true;
	output.push_back(v);
	if (v != dest)
	{
		for (int i = 0; i < graph[v].size(); ++i)
		{
			if (!visited[graph[v][i]])
			{
				bool stop = s_dfs(graph[v][i], dest);
				if (stop)
				{
					return true;
				}
			}
		}
	}
	else
	{
		return true;
	}
	return false;
}
*/

// Parallel DFS
/*
void p_dfs(int v)
{
#pragma omp critical
	visited[v] = true;
	output.push_back(v);
#pragma omp parallel for
	for (int i = 0; i < graph[v].size(); ++i)
	{
#pragma omp critical
		if (!visited[graph[v][i]])
		{
#pragma omp task
			p_dfs(graph[v][i]);
		}
	}
}
*/


